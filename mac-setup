#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2086,SC2015
for i in bash.shlib brew.shlib; do [ -f "$(dirname $0)"/lib/${i} ] && source "$(dirname $0)"/lib/${i} || { echo "[error]: $(dirname $0)/lib/${i} not found" 1>&2; exit 1; } done

function ensure-brew() {
  if ! brew --version 2>/dev/null 1>&2; then
    warn "brew not installed, will install in-line ..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi
}

function ensure-up-to-date-bash() {
  local bash_major_version
  bash_major_version=$(bash-major-version)
  if [ ${bash_major_version} -lt 5 ]; then
    warn "obsolete bash ${bash_major_version} found, installing latest bash"
    /usr/local/bin/brew install bash
    warn "the latest bash was installed, re-run $(basename $0)"
    exit 0
  fi
}

ensure-brew
ensure-up-to-date-bash

declare -A POST_INSTALLATION_STEPS

function usage() {
cat <<EOF

The authoritative source of logic to fully configure a new development Mac or to periodically
update a previously configured Mac. The script will automatically install brew if not found
and will automatically upgrade bash to an up-to-date version.

Executing the utility with 'help' or '--help' displays this.

	mac-setup help|--help

Executing the utility with no arguments attempts to install/update all tracked packages.
Theoretically is safe to repeatedly run the utility without any bad side effects, except
updating components to their latest versions. Most of the utility are installed and updated
with brew and we resort to custom only when brew cannot help.

	mac-setup

Individual packages can be installed/upgraded by specifying their name on command line, separated
by spaces.

	mac-setup gnu-sed

EOF
}

function main() {
    local args
    while [[ -n "$1" ]]; do
        if [ "$1" = "-v" ]; then
            # shellcheck disable=SC2034
            VERBOSE=true
        elif [ -z "${args}" ]; then
            args=$1
        else
            args="${args} $1"
        fi
        shift;
    done
    if [[ "${args}" == "help" || "${args}" == "--help"  ]]; then
        usage;
        exit 1
    fi
    setup-sequence ${args}
}

function setup-sequence() {
    debug "args: $*"
    setup-bash-startup-files
    generate-ssh-key
    install-shell-tools
    create-tmp
    #
    # Packages
    #
    update-brew
    update-bash
    install-or-update-gnu-sed
    install-or-update-gnu-getopt
    install-thunderbird
    install-or-upgrade-iterm2
    install-or-upgrade-secure-pipes
    install-or-upgrade-git-lfs
    install-or-upgrade-chrome

    #install-or-upgrade-git
    #install-or-upgrade-java
    #install-or-upgrade-docker
    #install-or-upgrade-maven
    #install-or-upgrade-openoffice
    #install-or-upgrade-jq

    post-configuration-report-and-next-steps
}

function setup-bash-startup-files() {
    if [[ ! -f ~/.bash_profile ]]; then
      cat > ~/.bash_profile <<EOF
export BASH_SILENCE_DEPRECATION_WARNING=1
[[ -f ~/.bashrc ]] && source ~/.bashrc
EOF
      info "created .bash_profile"
    fi
    if [[ ! -f ~/.bashrc ]]; then
      #
      # convenience aliases
      #
      cat >> ~/.bashrc <<EOF
alias h='history'
alias cdt='cd ~/tmp'
alias nodocker='ssh -p 58585 docker@192.168.1.2'
alias rackstation='ssh root@192.168.1.4'
alias not500='ssh -p 58585 root@192.168.1.10'
alias noper430='ssh root@192.168.1.13'
# Docker | clean dangling images
alias dcd='docker rmi \$(docker images --filter \"dangling=true\" -q --no-trunc)'
EOF
      info "created .bashrc"
    fi
}

function generate-ssh-key() {
    [[ -f ~/.ssh/id_rsa ]] && return 0
    ssh-keygen -q -b 2048 -P "" -f ~/.ssh/id_rsa -t rsa || error "failed to create SSH key"
    chmod -R go-rwx ~/.ssh
    info "created SSH key"
}

function install-shell-tools() {
    local dir
    dir=$(dirname $0)
    dir=$(to-absolute-path ${dir})
    add-to-head-of-user-path ${dir}
    #
    # "install" cdw
    #
    if grep "^alias cdw=" ~/.bashrc >/dev/null; then
        debug "cdw already installed"
    else
        info "installing cdw ..."
        echo "alias cdw='. cdwi'" >> ~/.bashrc
    fi
}

function create-tmp() {
    if [ ! -d ~/tmp ]; then
        mkdir ~/tmp
        info "created ~/tmp"
    fi
}

function add-to-head-of-user-path() {
    debug "$*"
    [[ -z "$1" ]] && return 0
    #
    # if it is already there, noop
    #
    local regex=${1//\//\\/}
    if grep ${regex} ~/.bashrc > /dev/null; then
        debug "$1 already in PATH"
        return 0
    fi
    echo "export PATH=$1:\${PATH}" >> ~/.bashrc
    info "added $1 to the head of user PATH"
}

function post-configuration-report-and-next-steps() {
    if [[ "${#POST_INSTALLATION_STEPS[@]}" = "0" ]]; then
        echo ""
        echo "There are no post-installation steps."
        echo ""
        return 0;
    fi
    echo ""
    echo "Post-installation steps:"
    echo ""
    local cnt=1
    for i in "${!POST_INSTALLATION_STEPS[@]}"; do
        printf '%s' "$((cnt++)). ${POST_INSTALLATION_STEPS[${i}]}"
        echo ""
        echo ""
    done
}

function update-brew() {
  info "updating brew ..."
  brew update || fail "failed to update brew"
  #
  # we don't want to exit, we just want to see the warnings
  #
  brew doctor && info "brew installation verified" || warn "brew doctor detected problems"
}

function update-bash() {
  info "upgrading bash ..."
  brew upgrade bash || fail "failed to upgrade bash"
}

function install-or-update-gnu-sed() {
    local upgrade=false
    sed --version 2>&1 | grep "GNU sed" > /dev/null 2>&1 && upgrade=true
    local text
    ${upgrade} && text="upgrad" || text="install"
    info "${text}ing GNU sed ..."
    brew install gnu-sed || fail "failed to ${text} GNU sed"
    # --with-default-names has been removed since Jan 2019, so we need to to this instead:
    add-to-head-of-user-path /usr/local/opt/gnu-sed/libexec/gnubin
}

function install-or-update-gnu-getopt() {
    info "installing/upgrading GNU getopt ..."
    brew install gnu-getopt || fail "failed to handle GNU getopt"
    # --with-default-names has been removed since Jan 2019, so we need to to this instead:
    add-to-head-of-user-path /usr/local/opt/gnu-getopt/bin
}

function install-thunderbird() {
  [[ -d /Applications/Thunderbird.app ]] && { info "Thunderbird already installed"; return 0; }
  info "installing Thunderbird ..."
  brew install --cask thunderbird && info "Thunderbird installed ..." || fail "failed to install Thunderbird"
  POST_INSTALLATION_STEPS["thunderbird"]="Start Thunderbird and configure accounts manually. See https://kb.novaordis.com/index.php/Thunderbird_Configuration#Overview."
}

function install-or-upgrade-iterm2() {
    info "installing iterm2 ..."
    brew install --cask iterm2 || fail "failed to install iterm2"
    POST_INSTALLATION_STEPS["iterm2"]="Start iterm2, 'Keep in Dock' and move on the right position in Dock.\n   Then configure: Profiles -> Open Profiles -> Edit Profiles -> Default\n       Colors -> Color Presets -> Light Background\n       Text -> Font -> 12 pt Menlo Regular"
}

function install-or-upgrade-secure-pipes() {
    info "installing secure-pipes ..."
    brew install --cask secure-pipes || fail "failed to install secure-pipes"
    POST_INSTALLATION_STEPS["secure-pipes"]="Configure secure-pipes"
}

function install-or-upgrade-git-lfs() {
    info "installing git-lfs ..."
    # brew install git-lfs does not handle nicely an already installed git-lfs so we query it ourselves
    if is-installed git-lfs; then
      info "git-lfs already installed ..."
    else
      brew install git-lfs || fail "failed to install git-lfs"
    fi
}

function install-or-upgrade-chrome() {
    info "installing chrome ..."
    brew install --cask google-chrome || fail "failed to install chrome"
}

#
# Under consideration
#

function install-or-upgrade-git() {
    info "installing git and git-lfs ..."
    brew install git || fail "failed to install git"
}

function install-or-upgrade-java() {
    info "installing corretto 11 ..."
    brew install --cask corretto11 || fail "failed to install corretto11"
}

function install-or-upgrade-docker() {
    info "installing Docker Desktop ..."
    brew cask install --cask docker && info "Docker Desktop installed" || { error "failed to install Docker Desktop"; exit 1; }
    POST_INSTALLATION_STEPS["docker"]="Finish Docker Desktop installation\nGo to Applications folder and click on Docker, follow instructions.\nWhen you get access to Docker Desktop, go to Preferences → Kubernetes → Enable Kubernetes"
}

function install-or-upgrade-maven() {
    info "installing maven ..."
    brew install maven && info "maven installed" || { error "failed to install maven"; exit 1; }
}

function install-or-upgrade-openoffice() {
    info "installing openoffice ..."
    brew install --cask openoffice && info "openoffice installed" || { error "failed to install openoffice"; exit 1; }
}

function install-or-upgrade-jq() {
    info "installing jq ..."
    brew install jq && info "jq installed" || { error "failed to install jq"; exit 1; }
}

main "$@"

