#!/usr/bin/env bash

[[ -f $(dirname "$0")/../lib/bash.shlib ]] && . "$(dirname $0)"/../lib/bash.shlib || { echo "$(dirname $0)/../lib/bash.shlib not found" 1>&2; exit 1; }
[[ -f $(dirname "$0")/mediawiki.shlib ]] && . "$(dirname $0)"/mediawiki.shlib || { echo "$(dirname "$0")/mediawiki.shlib not found" 1>&2; exit 1; }

# shellcheck disable=SC2034
VERSION=0.2.4

function usage() {

cat <<EOF

$(basename $0) is a tool to backup a mediawiki instance (database content, files, extensions, configuration and
everything is needed to fully restore the instance). $(basename $0) produces a single file that can be used as
argument to restore_mediawiki to restore the instance.

Usage:

  $(basename $0) <mediawiki-installation-dir> [-t|--target-dir <dir>]

Arguments:

  <mediawiki-installation-dir> is the local file system directory where the mediawiki instance is installed (by default
    /var/www/mediawiki-<version>). Do not use a symbolic link to initiate the backup. The backup file is placed in the
    current directory, unless -t|--target-dir option is used.

Options:

 -t|--target-dir Optional designation of the target directory. If no option is specified, the current directory
   is used as target directory.

 -p|--preserve-tmp Optional boolean flag that instructs the program to preserve the temporary directory.

EOF
}

function main() {

  # shellcheck disable=SC2015
  process-common-arguments "$@" && set -- "${ARGS[@]}" || fail "failed to process common arguments"

  ${HELP} || [[ -z $1 ]] && { usage; exit 0; }

  unset ARGS
  declare -a ARGS
  declare -A OPTIONS
  OPTIONS["--target-dir"]="string -t"
  OPTIONS["--preserve-tmp"]="boolean -p"
  process-options "$@"
  fail-on-unknown-arguments 1

  local tmp_dir
  tmp_dir=$(get-tmp-dir) || exit 1
  # shellcheck disable=SC2064
  trap "mediawiki_cleanup ${tmp_dir} ${OPTIONS[--preserve-tmp]}" EXIT

  backup-mediawiki "${ARGS[0]}" "${tmp_dir}" "${OPTIONS[--target-dir]}"
}

function backup-mediawiki() {

  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  local tmp_dir=$2
  local target_dir=${3:-.}

  debug "mediawiki_dir: ${mediawiki_dir}"
  debug "tmp_dir: ${tmp_dir}"
  debug "target_dir: ${target_dir}"

  local mediawiki_version
  mediawiki_version=$(ensure_valid_mediawiki_dir "${mediawiki_dir}" --expect-LocalSettings)
  debug "mediawiki version: ${mediawiki_version}"

  ensure_root

  local dated_tmp_dir
  dated_tmp_dir=$(create-dated-subdir "${tmp_dir}" "${mediawiki_dir}") || exit 1
  backup-database "${mediawiki_dir}" "${dated_tmp_dir}"
  backup-server-files "${mediawiki_dir}" "${dated_tmp_dir}"
  backup-httpd-configuration "${dated_tmp_dir}"
  backup-certificates "${dated_tmp_dir}"
  backup-php-configuration "${dated_tmp_dir}"
  backup-network-configuration "${dated_tmp_dir}"
  backup-mediawiki-tools "${dated_tmp_dir}"
  build-backup-archive "${dated_tmp_dir}" "${target_dir}"
}

#
# Creates a dated subdirectory in the given directory and return the path to stdout. The parent must exist.
#
function create-dated-subdir() {

  debug "${FUNCNAME[0]}($*)"
  local parent_dir=$1
  local mediawiki_dir=$2
  [[ -d ${parent_dir} ]] || fail "parent directory does not exist: ${parent_dir}"
  local dir hostname server_name
  hostname=$(uname -n)
  hostname=${hostname%%.*}
  server_name=$(get_php_defined_value "${mediawiki_dir}/LocalSettings.php" wgServer)
  server_name=${server_name#*:\/\/}
  dir=${parent_dir}/$(date +'%Y.%m.%d-%H.%M.%S')-${hostname}-${server_name}-backup
  mkdir "${dir}" || fail "failed to create dated subdirectory: ${dir}"
  echo "${dir}"
}

function backup-database() {

  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  local tmp_dir=$2 # tmp dir is supposed to exist
  local local_settings_file=${mediawiki_dir}/LocalSettings.php
  local database_host database_user database_password database_name
  database_host=$(get_php_defined_value "${local_settings_file}" wgDBserver) || exit 1
  database_user=$(get_php_defined_value "${local_settings_file}" wgDBuser) || exit 1
  database_password=$(get_php_defined_value "${local_settings_file}" wgDBpassword) || exit 1
  database_name=$(get_php_defined_value "${local_settings_file}" wgDBname) || exit 1

  debug "database_host: ${database_host}"
  debug "database_user: ${database_user}"
  debug "database_password: ${database_password}"
  debug "database_name: ${database_name}"

  local database_backup_dir=${tmp_dir}/${DATABASE_BACKUP_DIR_NAME}
  mkdir "${database_backup_dir}" || fail "failed to create database backup directory: ${database_backup_dir}"

  local backup_file=${tmp_dir}/${DATABASE_BACKUP_FILE}
  debug "backing up database in ${backup_file} ..."
  if mysqldump -h "${database_host}" -u "${database_user}" --password="${database_password}" --default-character-set=binary "${database_name}" > "${backup_file}"; then
    info "database backup successful, backup size $(wc -c "${backup_file}" | awk '{print $1}') bytes"
  else
    fail "failed to backup database"
  fi
}

#
# Recursively copies the entire mediawiki installation tree, preserving
#
function backup-server-files() {

  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  local tmp_dir=$2 # tmp dir is supposed to exist

  mediawiki_dir=${mediawiki_dir%/}
  debug "backing up server files from ${mediawiki_dir} to ${tmp_dir} ..."
  if cp --archive "${mediawiki_dir}" "${tmp_dir}"; then
    info "server directory backup successful: ${mediawiki_dir}"
  else
    fail "failed to backup server directory ${mediawiki_dir} in ${tmp_dir}"
  fi
}

function backup-httpd-configuration {
  debug "${FUNCNAME[0]}($*)"
  local tmp_dir=$1 # tmp dir is supposed to exist
  debug "backing up httpd configuration to ${tmp_dir} ..."

  local target_dir=${tmp_dir}/etc/httpd
  mkdir -p "${target_dir}"
  if cp -r /etc/httpd/conf /etc/httpd/conf.d /etc/httpd/conf.modules.d "${target_dir}"; then
    info "httpd configuration backup successful"
  else
    fail "failed to backup httpd configuration"
  fi
}

function backup-certificates {
  debug "${FUNCNAME[0]}($*)"
  local tmp_dir=$1 # tmp dir is supposed to exist
  debug "backing up TLS certificates to ${tmp_dir} ..."

  local src_dir="/etc/pki/tls/certs"
  local target_dir=${tmp_dir}${src_dir}
  mkdir -p "${target_dir}"
  if cp ${src_dir}/*.crt "${target_dir}"; then
    info "${src_dir}/*.crt TLS certificate backup successful"
  else
    fail "failed to backup TLS certificates *.crt from ${src_dir}"
  fi
  #
  # remove some generic files to eliminate confusion
  #
  rm -f "${target_dir}/ca-bundle.crt"
  rm -f "${target_dir}/ca-bundle.trust.crt"
  rm -f "${target_dir}/localhost.crt"

  src_dir="/etc/pki/tls/private"
  target_dir=${tmp_dir}${src_dir}
  mkdir -p "${target_dir}"
  if cp ${src_dir}/* "${target_dir}"; then
    info "${src_dir} private key backup successful"
  else
    warn "failed to backup private key from ${src_dir}, no private key will be available in the backup"
  fi
  #
  # remove some generic files to eliminate confusion
  #
  rm -f "${target_dir}/localhost.key"
  #
  # backup Let's Encrypt files, if they exist
  #
  src_dir="/etc/letsencrypt"
  target_dir="${tmp_dir}/etc"
  if [[ -d ${src_dir} ]]; then
      if cp -r ${src_dir} "${target_dir}"; then
        info "${src_dir} Let's Encrypt backup successful"
      else
        warn "failed to backup Let's Encrypt directory ${src_dir}, no Let's Encrypt private key or certificates will be available in the backup"
      fi
  fi
}

function backup-php-configuration {

  debug "${FUNCNAME[0]}($*)"
  local tmp_dir=$1 # tmp dir is supposed to exist

  #
  # We rely on the fact that usually the php configuration resides in /etc/php.ini.*. Better logic can be implemented.
  #
  debug "backing up PHP configuration to ${tmp_dir} ..."
  local src_dir="/etc"
  local target_dir=${tmp_dir}${src_dir}
  [[ ! -d ${target_dir} ]] && mkdir -p "${target_dir}"
  if cp ${src_dir}/php.ini* "${target_dir}"; then
    info "PHP configuration backup successful"
  else
    fail "failed to backup PHP configuration"
  fi
}

function backup-network-configuration() {

  debug "${FUNCNAME[0]}($*)"
  local tmp_dir=$1
  debug "backing up network configuration to ${tmp_dir} ..."

  local src_dir="/etc/sysconfig/network-scripts"
  local target_dir=${tmp_dir}${src_dir}
  mkdir -p "${target_dir}"
  if cp ${src_dir}/ifcfg-* "${target_dir}"; then
    rm -rf "${target_dir}/ifcfg-lo"
    info "${src_dir}/ifcfg-* backup successful"
  else
    fail "failed to backup network interface configuration files ifcfg-* from ${src_dir}"
  fi

  local src_dir="/etc/sysconfig"
  local target_dir=${tmp_dir}${src_dir}
  if [[ ! -f ${src_dir}/iptables ]]; then
      warn "no ${src_dir}/iptables file found, it will not be backed up"
  else
    if cp ${src_dir}/iptables "${target_dir}"; then
      info "${src_dir}/iptables backup successful"
    else
      fail "failed to backup iptables configuration from ${src_dir}"
    fi
  fi
}

function backup-mediawiki-tools() {

  debug "${FUNCNAME[0]}($*)"
  local tmp_dir=$1
  debug "backing up mediawiki tools to ${tmp_dir} ..."

  local src_dir="/root/bin"
  if [[ ! -d ${src_dir} ]]; then
    warn "no ${src_dir} directory found, it will not be backed up"
    return 0
  fi
  local target_dir=${tmp_dir}${src_dir}
  mkdir -p "${target_dir}"
  if cp ${src_dir}/* "${target_dir}"; then
    rm -rf "${target_dir}/read-temperature"
    info "${src_dir} backup successful"
  else
    fail "failed to backup mediawiki tools from ${src_dir}"
  fi
}

function build-backup-archive() {

  debug "${FUNCNAME[0]}($*)"
  local dated_tmp_dir=$1
  local target_dir=$2
  local name command
  target_dir=${target_dir%/}
  name=$(basename "${dated_tmp_dir}")
  command="tar -cpszf ${target_dir}/${name}.tgz -C $(dirname "${dated_tmp_dir}") ${name}"
  debug "executing ${command}"
  if ${command}; then
    info "backup archive: ${target_dir}/${name}.tgz"
  else
    fail "failed to execute ${command}"
  fi
}

main "$@"
