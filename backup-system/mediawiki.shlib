#!/usr/bin/env bash

export DATABASE_BACKUP_DIR_NAME=database
export DATABASE_BACKUP_FILE=${DATABASE_BACKUP_DIR_NAME}/database-backup.sql
export APACHE_USER=apache
export APACHE_GROUP=apache

#
# fail if we are not root. We want to archive as root to preserve the original file ownership.
#
function ensure_root() {
  debug "${FUNCNAME[0]}()"
  [[ $(id -u) != "0" ]] && fail "$(basename $0) is not run as root but as $(id -u)"
}

#
# Options:
#  --expect-LocalSettings
#
# For a valid MediaWiki directory, return the MediaWiki version at stdout.
#
function ensure_valid_mediawiki_dir() {
  debug "${FUNCNAME[0]}($*)"
  local mediawiki_dir=$1
  shift
  local expect_LocalSettings=false
  while [[ -n $1 ]]; do
      if [[ $1 = "--expect-LocalSettings" ]]; then
        expect_LocalSettings=true
      fi
      shift
  done
  [[ -z ${mediawiki_dir} ]] && fail "no Media Wiki directory specified"
  [[ ! -d ${mediawiki_dir} ]] && fail "not a directory: ${mediawiki_dir}"
  [[ -h ${mediawiki_dir} ]] && fail "provide the original directory, not a symbolic link: ${mediawiki_dir}"
  [[ ! -f ${mediawiki_dir}/includes/DefaultSettings.php ]] && fail "not a mediawiki directory, missing includes/DefaultSettings.php: ${mediawiki_dir}"
  ${expect_LocalSettings} && [[ ! -f ${mediawiki_dir}/LocalSettings.php ]] && fail "not a mediawiki directory, missing LocalSettings.php: ${mediawiki_dir}"
  local mediawiki_version
  mediawiki_version=$(get_mediawiki_version "${mediawiki_dir}")
  [[ -z ${mediawiki_version} ]] && fail "no Media Wiki version could be read from ${mediawiki_dir}"
  echo "${mediawiki_version}"
}

#
# Return Media Wiki version at stdout. It takes into account that after 1.35 the version is
# maintained as 'MW_VERSION' in includes/Defines.php and older versions maintain it as
# 'wgVersion' in includes/DefaultSettings.php. Return an empty string if the version cannot
# be determined.

# Expects as first argument the Media Wiki root directory (/var/www/mediawiki-1.39.6)
#
function get_mediawiki_version() {
  local mediawiki_dir=$1
  [[ -z ${mediawiki_dir} ]] && fail "'mediawiki_dir' not provided"
  [[ ! -d ${mediawiki_dir} ]] && fail "not a directory: ${mediawiki_dir}"
  local mediawiki_version
  if [[ -f ${mediawiki_dir}/includes/Defines.php ]]; then
    mediawiki_version=$(grep "define.*MW_VERSION" "${mediawiki_dir}/includes/Defines.php" | sed -e "s/^.*, *'\(.*\)'.*$/\1/")
  fi
  [[ -n ${mediawiki_version} ]] && { echo "${mediawiki_version}"; return 0; }
  mediawiki_version=$(get_php_defined_value "${mediawiki_dir}/includes/DefaultSettings.php" wgVersion)
  echo "${mediawiki_version}"
}

#
# Get the expanded backup directory and extract the subdirectory that contains the file
# backup. Return the directory at stdout
#
function backup_dir_to_mediawiki_dir() {
  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -d ${backup_dir} ]] || fail "not a backup directory: ${backup_dir}"
  backup_dir=${backup_dir%/}
  local candidate
  for i in "${backup_dir}"/*; do
    local n=${i##*/}
    if [[ ${n} =~ mediawiki- ]]; then
        [[ -n ${candidate} ]] && fail "more than one mediawiki file backup directory found in ${backup_dir}: ${candidate}, ${n}"
        candidate=${n}
    fi
  done
  [[ -z ${candidate} ]] && fail "no mediawiki file backup directory found in ${backup_dir}. Looking for mediawiki-* and didn't find any ..."
  [[ -d "${backup_dir}/${candidate}" ]] || fail "not a mediawiki file backup directory: ${backup_dir}/${candidate}"
  echo "${backup_dir}/${candidate}"
}

#
# If --ask-for-confirmation is among arguments, the password will be requested twice, for verification.
# Once a match is confirmed, the value will be returned to stdout.
# TODO: move to bash.shlib
function read_database_root_password() {

  debug "${FUNCNAME[0]}()"
  local ask_for_confirmation=false
  while [[ -n $1 ]]; do
    if [[ $1 = "--ask-for-confirmation" ]]; then
      ask_for_confirmation=true
    fi
    shift
  done
  local password
  read -r -s -p "database root password: " password
  echo "" 1>&2
  if ${ask_for_confirmation}; then
    local password2
    read -r -s -p "repeat database root password: " password2
    echo "" 1>&2
    [[ ${password} != "${password2}" ]] && fail "passwords do not match"
  fi
  echo ${password}
}

#
# Second argument is the variable name (wgDBserver for database server name, etc.)
# Fail is no file or no corresponding value is found.
#
function get_php_defined_value() {

    debug "${FUNCNAME[0]}($*)"
    local f=$1
    local name=$2
    [[ -f ${f} ]] || fail "no such file: ${f}"
    local value
    value=$(cat ${f} | grep "\$${name} *= *" | sed -e 's/^.* *= *[\x27"]\(.*\)[\x27"].*$/\1/')
    [[ -z ${value} ]] && fail "\$${name}  not defined in ${f}"
    echo "${value}"
}

function mediawiki_cleanup() {

  debug "${FUNCNAME[0]}($*)"
  local tmp_dir=$1
  local preserve_tmp=${2:-false}

  if ${preserve_tmp}; then
    debug "temporary directory ${tmp_dir} preserved"
  else
    rm -rf "${tmp_dir}" && debug "removed temporary directory ${tmp_dir}" || warn "failed to remove temporary directory ${tmp_dir}"
  fi
}

