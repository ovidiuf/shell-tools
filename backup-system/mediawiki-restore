#!/usr/bin/env bash
# shellcheck disable=SC2015

[[ -f $(dirname "$0")/../lib/bash.shlib ]] && . "$(dirname "$0")/../lib/bash.shlib" || { echo "$(dirname "$0")/../lib/bash.shlib not found" 1>&2; exit 1; }
[[ -f $(dirname "$0")/mediawiki.shlib ]] && . "$(dirname "$0")/mediawiki.shlib" || { echo "$(dirname "$0")/mediawiki.shlib not found" 1>&2; exit 1; }

# shellcheck disable=SC2034
VERSION=0.5.0

function usage() {

cat <<EOF

$(basename "$0") is a tool to restore a mediawiki instance (database content, files,
extensions, configuration and everything is needed to a fully functional instance)
from a backup file created by mediawiki-backup script. $(basename "$0") reads the
backup file and restores the state of the old instance, given a new pre-installed
but empty MediaWiki instance.

The script will interactively request the MySQL root account password.

Usage:

  $(basename "$0") [options] <backup-file> <mediawiki-installation-dir>

Arguments:

  <backup-file> is the backup file produced by the peer mediawiki-backup script.

  <mediawiki-installation-dir> is the local mediawiki directory. The default value
      is /var/www/mediawiki-<version>.

Options:

  --skip-database - Skip database restoration and restore everything else (image files,
      Media Wiki configuration, certificates and keys). This option is useful if the
      database was already previously restored by other means.

  --database-only - Only perform database restoration and skip image files, Media Wiki
      configuration, certificates and keys restoration. This option, together with
      --image-files-only, is useful if restoring an old Media Wiki instance state after
      a full new installation of the latest Media Wiki version.

  --image-files-only - Only perform image file restoration. Skip database, Media Wiki
       configuration and certificates and key restoration. This option, together with
       --database-only, is useful if restoring an old Media Wiki instance state after
       a full new installation of the latest Media Wiki version.

  --restore-certs-and-keys - Restore certificates and keys (Linux only). If the option
      is not present, no certificates and keys will be restored.

  -d|--post-install-dir <post-installation-examples-dir> - the directory where the
      post-installation examples are written. The directory will be created if it does not
      exist. The local directory is used if -d|--post-install-dir not specified.

  -p|--preserve-tmp Optional boolean flag that instructs the program to preserve
      the temporary directory.

EOF
}

function main() {
  process-common-arguments "$@" && set -- "${ARGS[@]}" || fail "failed to process common arguments"
  ${HELP} || [[ -z $1 ]] && { usage; exit 0; }
  unset ARGS
  declare -a ARGS
  declare -A OPTIONS
  OPTIONS["--preserve-tmp"]="boolean -p"
  OPTIONS["--post-install-dir"]="string -d"
  OPTIONS["--skip-database"]="boolean"
  OPTIONS["--database-only"]="boolean"
  OPTIONS["--image-files-only"]="boolean"
  OPTIONS["--restore-certs-and-keys"]="boolean"
  process-options "$@"
  fail-on-unknown-arguments 2
  local tmp_dir
  tmp_dir=$(get-tmp-dir) || exit 1
  # shellcheck disable=SC2064
  trap "mediawiki_cleanup ${tmp_dir} ${OPTIONS[--preserve-tmp]}" EXIT
  restore_mediawiki "${ARGS[0]}" \
                    "${ARGS[1]}" \
                    "${tmp_dir}" \
                    "${OPTIONS[--post-install-dir]}" \
                    "${OPTIONS[--skip-database]}" \
                    "${OPTIONS[--database-only]}" \
                    "${OPTIONS[--image-files-only]}" \
                    "${OPTIONS[--restore-certs-and-keys]}"
}

function restore_mediawiki() {
  debug "${FUNCNAME[0]}($*)"
  local backup_file=$1
  local target_mediawiki_dir=$2
  local tmp_dir=$3
  local post_installation_examples_parent_dir=$4
  local skip_database=$5
  local database_only=$6
  local image_files_only=$7
  local restore_certificates_and_keys=$8
  debug "backup_file: ${backup_file}"
  debug "target_mediawiki_dir: ${target_mediawiki_dir}"
  debug "tmp_dir: ${tmp_dir}"
  [[ -z ${post_installation_examples_parent_dir} ]] && post_installation_examples_parent_dir=$(pwd)
  debug "post_installation_examples_parent_dir: ${post_installation_examples_parent_dir}"
  debug "skip_database: ${skip_database}"
  if [[ $(uname) != "Darwin" ]]; then
    ensure_root
  fi
  local backup_dir source_mediawiki_dir source_mediawiki_version target_mediawiki_version
  backup_dir=$(expand_backup "${backup_file}" "${tmp_dir}") || exit 1
  target_mediawiki_version=$(ensure_valid_mediawiki_dir "${target_mediawiki_dir}")
  source_mediawiki_dir=$(backup_dir_to_mediawiki_dir "${backup_dir}")
  source_mediawiki_version=$(get_mediawiki_version "${source_mediawiki_dir}")
  info "restoring from Media Wiki ${source_mediawiki_version} to Media Wiki ${target_mediawiki_version}"
  local database_root_password
  if ${skip_database} || ${image_files_only}; then
    debug "skipping database restoration, no database root password necessary"
  else
    database_root_password=$(read_database_root_password)
  fi
  local obsolete_skins_SEPARATOR_missing_extensions
  debug "backup_dir: ${backup_dir}"
  if ${skip_database} || ${image_files_only}; then
    info "database restoration skipped"
  else
    restore_database "${backup_dir}" "${database_root_password}"
  fi
  if ${database_only}; then
    info "database restoration completed, skipping everything else"
    return 0
  fi
  obsolete_skins_SEPARATOR_missing_extensions=$(diff_local_settings "${backup_dir}" "${target_mediawiki_dir}") || exit 1
  restore_image_files "${source_mediawiki_dir}" "${target_mediawiki_dir}"
  if ! ${image_files_only}; then
    if ${restore_certificates_and_keys}; then
      restore_certificates_and_keys "${backup_dir}"
    fi
    restore_top_symbolic_link "${backup_dir}" "${target_mediawiki_dir}"
  fi
  manual_post_install_warning "${backup_dir}" "${target_mediawiki_dir}" "${obsolete_skins_SEPARATOR_missing_extensions}" \
    "${source_mediawiki_version}" "${target_mediawiki_version}" "${post_installation_examples_parent_dir}"
}

#
# Expand the backup file and ensure it is a valid mediawiki backup. Return the backup
# directory at stdout.
#
function expand_backup() {
  debug "${FUNCNAME[0]}($*)"
  local backup_file=$1
  local tmp_dir=$2
  [[ -f ${backup_file} ]] || fail "no such backup file: ${backup_file}"
  info "extracting backup from ${backup_file} ..."
  tar xfz "${backup_file}" -C "${tmp_dir}" || fail "failed to extract backup file ${backup_file} in ${tmp_dir}"
  local backup_dir_name
  backup_dir_name=$(ls "${tmp_dir}")
  local backup_dir=${tmp_dir}/${backup_dir_name}
  [[ -d ${backup_dir} ]] || fail "the backed up content directory does not exist: ${backup_dir}"
  echo "${backup_dir}"
}

function restore_database() {
  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_root_password=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -d ${backup_dir} ]] || fail "no such backup directory: ${backup_dir}"
  [[ -z ${database_root_password} ]] && fail "'database_root_password' not provided"
  local source_mediawiki_dir source_local_settings_file database_host database_user database_password database_name
  source_mediawiki_dir=$(backup_dir_to_mediawiki_dir "${backup_dir}")
  local source_local_settings_file=${source_mediawiki_dir}/LocalSettings.php
  [[ -f ${source_local_settings_file} ]] || fail "no LocalSettings.php found in ${source_mediawiki_dir}"
  database_host=$(get_php_defined_value "${source_local_settings_file}" wgDBserver) || exit 1
  database_user=$(get_php_defined_value "${source_local_settings_file}" wgDBuser) || exit 1
  database_password=$(get_php_defined_value "${source_local_settings_file}" wgDBpassword) || exit 1
  database_name=$(get_php_defined_value "${source_local_settings_file}" wgDBname) || exit 1
  debug "database_host: ${database_host}"
  debug "database_user: ${database_user}"
  debug "database_password: ${database_password}"
  debug "database_name: ${database_name}"
  if create_database "${backup_dir}" \
                     "${database_host}" \
                     "${database_user}" \
                     "${database_password}" \
                     "${database_name}" \
                     "${database_root_password}"; then
      restore_database_content \
                      "${backup_dir}" \
                     "${database_user}" \
                     "${database_password}" \
                     "${database_name}"
  fi
}

#
# Returns 0 if the database was created, 1 if the database already exists. Fails on database
# creation failure.
#
function create_database() {
  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_host=$2
  local database_user=$3
  local database_password=$4
  local database_name=$5
  local database_root_password=$6
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${database_host} ]] && fail "'database_host' not provided"
  [[ -z ${database_user} ]] && fail "'database_user' not provided"
  [[ -z ${database_password} ]] && fail "'database_password' not provided"
  [[ -z ${database_name} ]] && fail "'database_name' not provided"
  [[ -z ${database_root_password} ]] && fail "'database_root_password' not provided"
  local result
  result=$(mysql -u root -p"${database_root_password}" -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='${database_name}'")
  if [[ -n ${result} ]]; then
    info "database ${database_name} already exists, will not create and will not restore content; delete the database if you want to restore content"
    return 1
  fi
  cat <<EOF > "${backup_dir}/database-creation-statements.sql"
CREATE USER '${database_user}'@'${database_host}' IDENTIFIED BY '${database_password}';
CREATE DATABASE ${database_name};
GRANT ALL PRIVILEGES ON ${database_name}.* TO '${database_user}'@'${database_host}';
FLUSH PRIVILEGES;
COMMIT;
exit
EOF
  info "creating database ${database_name} ..."
  if mysql -u root -p"${database_root_password}" < "${backup_dir}/database-creation-statements.sql"; then
    info "database ${database_name} and user ${database_user} successfully created"
    return 0
  else
    fail "failed to create database ${database_name} and/or user ${database_user}"
  fi
}

function restore_database_content() {
  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local database_user=$2
  local database_password=$3
  local database_name=$4
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${database_user} ]] && fail "'database_user' not provided"
  [[ -z ${database_password} ]] && fail "'database_password' not provided"
  [[ -z ${database_name} ]] && fail "'database_name' not provided"
  # shellcheck disable=SC2153
  local database_backup_file=${backup_dir}/${DATABASE_BACKUP_FILE}
  [[ -f ${database_backup_file} ]] || fail "database backup file not found: ${database_backup_file}"
  info "restoring content for database ${database_name} ..."
  if mysql -u "${database_user}" -p"${database_password}" "${database_name}" < "${database_backup_file}"; then
    info "database ${database_name} successfully restored"
  else
    fail "failed to restore database ${database_name}"
  fi
}

#
# Return at stdout the comma-separated list of dropped skins (may be empty), followed by 
# SEPARATOR, followed by the comma-separated list of extensions that were not found installed 
# locally (they will have to be installed manually)
#
function diff_local_settings() {
  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local target_mediawiki_dir=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_mediawiki_dir source_local_settings_file obsolete_skins missing_extensions
  source_mediawiki_dir=$(backup_dir_to_mediawiki_dir "${backup_dir}")
  source_local_settings_file=${source_mediawiki_dir}/LocalSettings.php
  [[ -f ${source_local_settings_file} ]] || fail "no LocalSettings.php found in ${source_mediawiki_dir}"
  obsolete_skins=$(identify_obsolete_skins "${source_local_settings_file}" "${target_mediawiki_dir}")
  missing_extensions=$(identify_locally_missing_extensions "${source_local_settings_file}" "${target_mediawiki_dir}")
  echo "${obsolete_skins}${SEPARATOR}${missing_extensions}"
}

#
# Identify skins that exist in the source LocalSettings.php but not in the target
# LocalSettings.php. Return at stdout a comma separated list of obsolete skins, or empty
# string if no obsolete skin was identified.
#
function identify_obsolete_skins() {
  debug "${FUNCNAME[0]}($*)"
  local source_local_settings_file=$1
  local target_mediawiki_dir=$2
  [[ -z ${source_local_settings_file} ]] && fail "'source_local_settings_file' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_skins=""
  # shellcheck disable=SC2002,SC2013
  for s in $(cat "${source_local_settings_file}" | grep "wfLoadSkin(.*)" | sed -e 's/^.*wfLoadSkin( *.\(.*\)[^ ] *).*$/\1/'); do
      [[ -z ${source_skins} ]] && source_skins=${s} || source_skins="${source_skins} ${s}"
  done
  [[ -z ${source_skins} ]] && { warn "no skins defined in ${source_local_settings_file}"; return 0; }
  local obsolete_skins
  for s in ${source_skins}; do
    if [[ ! -d ${target_mediawiki_dir}/skins/${s} ]]; then
        # the skin does not exist in the target MediaWiki installation, remove it from LocalSettings.php
        debug "skin ${s} does not exist in the target MediaWiki installation"
        [[ -z ${obsolete_skins} ]] && obsolete_skins=${s} || obsolete_skins="${obsolete_skins} ${s}"
    fi
  done
  [[ -z ${obsolete_skins} ]] && { info "no obsolete skins found"; return 0; }
  # We used to update the target LocalSettings.php in place, but not anymore
#  for s in ${obsolete_skins}; do
#    sed -i -e 's/^\(.*wfLoadSkin( *.'${s}'[^ ] *).*\)$/\/\/ \1/' "${source_local_settings_file}" && \
#      info "skin ${s} commented out in $(basename ${source_local_settings_file})" || \
#      fail "failed to comment out skin ${s} from ${source_local_settings_file}"
#  done
  echo "${obsolete_skins}"
}

#
# Scan source and target LocalSettings.php and identify extensions that are not found locally
# in the target MediaWiki directory. Since we're upgrading, the old extensions are most likely
# obsolete and will have to be installed manually. Return at stdout a comma separated list of
# locally missing extensions, or empty string if none was dropped.
#
function identify_locally_missing_extensions() {
  debug "${FUNCNAME[0]}($*)"
  local source_local_settings_file=$1
  local target_mediawiki_dir=$2
  [[ -z ${source_local_settings_file} ]] && fail "'source_local_settings_file' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_extensions=""
  # shellcheck disable=SC2002,SC2013
  for e in $(cat "${source_local_settings_file}" | grep "wfLoadExtension(.*)" | sed -e 's/^.*wfLoadExtension( *.\(.*\)[^ ] *).*$/\1/'); do
      [[ -z ${source_extensions} ]] && source_extensions=${e} || source_extensions="${source_extensions} ${e}"
  done
  # shellcheck disable=SC2002,SC2013
  for e in $(cat "${source_local_settings_file}" | grep "require_once.*/extensions/" | sed -e 's/^.*extensions\/\(.*\)\/.*$/\1/'); do
      [[ -z ${source_extensions} ]] && source_extensions=${e} || source_extensions="${source_extensions} ${e}"
  done
  [[ -z ${source_extensions} ]] && { warn "no extensions defined in ${source_local_settings_file}"; return 0; }
  local locally_missing_extensions
  for e in ${source_extensions}; do
    if [[ ! -d ${target_mediawiki_dir}/extensions/${e} ]]; then
        # the extension does not exist in the target MediaWiki installation, collect it
        debug "extension ${e} does not exist in the target MediaWiki installation"
        [[ -z ${locally_missing_extensions} ]] && locally_missing_extensions=${e} || locally_missing_extensions="${locally_missing_extensions} ${e}"
    fi
  done
  [[ -z ${locally_missing_extensions} ]] && { info "no missing extensions found"; return 0; }
  # We used to update the target LocalSettings.php in place, but not anymore
#  for e in ${locally_missing_extensions}; do
#    sed -i -e 's/^\(.*wfLoadExtension( *.'${e}'[^ ] *).*\)$/\/\/ \1/' ${source_local_settings_file} && \
#      info "extension ${e} commented out in $(basename ${source_local_settings_file})" || \
#      fail "failed to comment out extension ${e} from ${source_local_settings_file}"
#  done
  echo "${locally_missing_extensions}"
}

function restore_image_files() {
  debug "${FUNCNAME[0]}($*)"
  local source_mediawiki_dir=$1
  local target_mediawiki_dir=$2
  [[ -z ${source_mediawiki_dir} ]] && fail "'source_mediawiki_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local source_image_dir=${source_mediawiki_dir}/images
  [[ -d ${source_image_dir} ]] || fail "no image directory found in ${source_mediawiki_dir}"
  [[ ! -f ${target_mediawiki_dir}/images/.htaccess ]] && fail "target Media Wiki image directory does not have an .htaccess file, which means that the new Media Wiki installation failed somewhere"
  # remove source .htaccess, the already installed instance has an up-to-date .htaccess
  rm "${source_image_dir}/.htaccess"
  # remove source 'deleted' and 'temp'
  rm -rf "${source_image_dir}/deleted"
  rm -rf "${source_image_dir}/temp"
  cp -r "${source_image_dir}" "${target_mediawiki_dir}" || fail "failed to copy ${source_image_dir} to ${target_mediawiki_dir}"
  local target_image_dir=${target_mediawiki_dir}/images
  if [[ $(uname) == "Darwin" ]]; then
    debug "MacOS: no chmod and selinux configuration necessary"
  else
    chown -R "${APACHE_USER}:${APACHE_GROUP}" "${target_image_dir}" || fail "failed to chown ${APACHE_USER}:${APACHE_GROUP} ${target_image_dir}"
    if [[ $(getenforce) = "Enforcing" ]]; then
        info "configuring SELinux context on ${target_image_dir}"
        chcon -R -t httpd_sys_script_rw_t "${target_image_dir}" || fail "failed to -R -t httpd_sys_script_rw_t ${target_image_dir}"
    fi
  fi
  info "image directory restored: ${target_image_dir}"
}

function restore_certificates_and_keys() {
  debug "${FUNCNAME[0]}($*)"
  if [[ $(uname) == "Darwin" ]]; then
    warn "no certificates and keys can be restored on MacOS, the --restore-certs-and-keys option is superfluous"
    return 0
  fi
  local backup_dir=$1
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  local source_dir=${backup_dir}/etc/pki/tls/certs
  [[ -d ${source_dir} ]] || { warn "no certificate directory found in ${backup_dir}: ${source_dir}, no certificates will be restored"; return 0; }
  cp "${source_dir}"/*.crt /etc/pki/tls/certs || { warn "failed to copy ${source_dir}/*.crt to /etc/pki/tls/certs, no certificates will be restored"; return 0; }
  local source_dir=${backup_dir}/etc/pki/tls/private
  [[ -d ${source_dir} ]] || fail "no key directory found in ${backup_dir}: ${source_dir}"
  for i in "${source_dir}"/*.key; do
    cp "${i}" /etc/pki/tls/private || fail "failed to copy ${i} to /etc/pki/tls/private"
    chmod go-rwx "/etc/pki/tls/private/$(basename "${i}")" || fail "failed to chmod /etc/pki/tls/private/$(basename "${i}")"
  done
  info "certificates and private keys restored in /etc/pki/tls"
}

function restore_top_symbolic_link() {
  debug "${FUNCNAME[0]}($*)"
  if [[ $(uname) == "Darwin" ]]; then
    info "no top symbolic link is restored on MacOS"
    return 0
  fi
  local backup_dir=$1
  local target_mediawiki_dir=$2
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  local parent_dir dir_name symlink_name
  parent_dir=$(dirname "${target_mediawiki_dir}")
  dir_name=$(basename "${target_mediawiki_dir}")
  # shellcheck disable=SC2002
  symlink_name=$(cat "${backup_dir}/etc/httpd/conf.d/ssl.conf" | grep ServerName | tail -1 | sed -e 's/^.* \(.*\) *$/\1/')
  debug "parent_dir: ${parent_dir}, dir_name: ${dir_name}, symlink_name: ${symlink_name}"
  (cd "${parent_dir}" || exit 1; ln -sF "./${dir_name}" "${symlink_name}") && \
    info "restored symbolic link ${symlink_name} → ${dir_name} in ${parent_dir}" || \
    fail "failed to restore symbolic link ${symlink_name} → ${dir_name} in ${parent_dir}"
  if [[ $(getenforce) = "Enforcing" ]]; then
      restorecon -FR "${parent_dir}/${symlink_name}" && \
        info "configured SELinux context on ${parent_dir}/${symlink_name}" || \
        fail "failed to restorecon -FR ${parent_dir}/${symlink_name}"
  fi
}

function manual_post_install_warning() {
  debug "${FUNCNAME[0]}($*)"
  local backup_dir=$1
  local target_mediawiki_dir=$2
  local obsolete_skins_SEPARATOR_missing_extensions=$3
  local source_mediawiki_version=$4
  local target_mediawiki_version=$5
  local post_installation_examples_parent_dir=$6
  [[ -z ${backup_dir} ]] && fail "'backup_dir' not provided"
  [[ -z ${target_mediawiki_dir} ]] && fail "'target_mediawiki_dir' not provided"
  [[ -z ${source_mediawiki_version} ]] && fail "'source_mediawiki_version' not provided"
  [[ -z ${target_mediawiki_version} ]] && fail "'target_mediawiki_version' not provided"
  [[ -z ${post_installation_examples_parent_dir} ]] && fail "'post_installation_examples_parent_dir' not provided"
  [[ -d ${post_installation_examples_parent_dir} ]] || fail "'post_installation_examples_parent_dir' not a valid directory: ${post_installation_examples_parent_dir}"
  info ""
  info ""
  local obsolete_skins=${obsolete_skins_SEPARATOR_missing_extensions%${SEPARATOR}*}
  [[ -n ${obsolete_skins} ]] && info "skins configured in the source installation that are not present locally: ${obsolete_skins}"
  local missing_extensions=${obsolete_skins_SEPARATOR_missing_extensions#*${SEPARATOR}}
  [[ -n ${missing_extensions} ]] && info "extension present in the source installation that are not present locally: ${missing_extensions}"
  # copy examples
  local post_installation_examples_dir=${post_installation_examples_parent_dir}/mediawiki-restore-examples
  [[ ! -d ${post_installation_examples_dir} ]] && mkdir -p "${post_installation_examples_dir}"
  cp "${backup_dir}/etc/httpd/conf.d/ssl.conf" "${post_installation_examples_dir}" || \
    fail "failed to copy ${backup_dir}/etc/httpd/conf.d/ssl.conf in ${post_installation_examples_dir}"
  cp "${backup_dir}/etc/php.ini" "${post_installation_examples_dir}" || \
    fail "failed to copy ${backup_dir}/etc/php.ini in ${post_installation_examples_dir}"
  local listen_directive
  # shellcheck disable=SC2002
  listen_directive=$(cat "${post_installation_examples_dir}/ssl.conf" | grep "^Listen")
  info ""
  info ""
  warn "Continue with manual post-restore steps:"
  warn ""
  if [[ ${source_mediawiki_version} != "${target_mediawiki_version}" ]]; then
      warn " - This MediaWiki version (${target_mediawiki_version}) is different from source version (${source_mediawiki_version}),"
      warn "   run 'php update in ${target_mediawiki_dir}/maintenance'."
  fi
  warn " - Configure the Listen directive in /etc/httpd/conf.d/ssl.conf to \"${listen_directive}\"."
  warn "   Example available in ${post_installation_examples_dir}/ssl.conf."
  warn " - Configure the HTTPS VirtualHost in /etc/httpd/conf.d/ssl.conf to \"${listen_directive}\"."
  warn "   Possibly adjust or remove  SSLProtocol and SSLCipherSuite"
  warn "   Example available in ${post_installation_examples_dir}/ssl.conf."
  warn " - Update custom configurations from the backup php.ini into /etc/php.ini."
  warn " - If the wiki will be accessed externally with a different server address (including port),"
  warn "   modify LocalSettings.php \$wgServer setting."
  warn "   Example available in ${post_installation_examples_dir}/php.ini."
  warn "   Check 'upload_max_filesize' and 'post_max_size' values."
  [[ -n ${missing_extensions} ]] && warn " - Re-install the following extensions, if needed: ${missing_extensions}."
  info ""
}

main "$@"
